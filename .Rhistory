install.packages("dplyr")
library(dplyr)
install.packages("shiny")
install.packages("plotly")
install.packages("shinythemes")
install.packages("leaflet")
install.packages("RColorBrewer")
install.packages("choroplethr")
install.packages("choroplethrMaps")
install.packages("stringr")
install.packages("ggplot2")
install.packages("ggExtra")
setwd("~/Documents/info201-group-project")
library(dplyr)
library(RColorBrewer)
library(leaflet)
Sys.setlocale(category = "LC_ALL", locale = "C")
df <- read.csv("police_killings.csv", stringsAsFactors = F)
build_map <- function(df, variable) {
labs <- lapply(seq(nrow(df)), function(i) {
paste0( '<p>', df[i, "name"], '<p></p>',
df[i, "city"], ', ',
df[i, "state"],'</p>')
})
factpal <- colorFactor(brewer.pal(4, "Dark2"), df[, variable])
map <- leaflet(df) %>%
addTiles() %>%
addCircleMarkers(radius = 1, label = lapply(labs, HTML), color = factpal(unique(df[,variable])), opacity = .7) %>%
addLegend(position = "bottomleft", pal = factpal, values = ~unique(df[,variable]), title = variable, na.label = "Not Collected")
map
}
library(shiny)
library(plotly)
library(shinythemes)
shinyUI(navbarPage(theme = shinytheme("journal"),
"Who Police Killed and Where in 2015",
tabPanel(
"Introduction",
tags$h3("In 2015..."),
tags$p("Police killed 467 Americans. Some came from opulent backgrounds,
others from places historically under the poverty line. Some were students, parents, or employees. Some were young, old, or somewhere
in between. Some were armed and some were not.
What each of them will not be is forgotten. Using data from the statistical website fivethirtyeight that merged the Guardian's data on police killings
in 2015 with Census data, each victim will not be just a point. Each victim will
be a part of a bigger puzzle, to try to find clarity and make sense of the devastating killings that have occured. By exploring and representation facets of the victim's
background and the demographics surrounding the location of the killing, we hope that
the relationships between these factors will reveal themselves."),
tags$p("Here is a link to the dataset:"),
tags$a(href = " https://github.com/fivethirtyeight/data/tree/master/police-killings",
"Police Killings in 2015")
),
# Create a tab panel bubble map
tabPanel(
"Bubble Map",
# Create sidebar layout
sidebarLayout(
sidebarPanel(
tags$h3("Map of All Police Killings in 2015"),
helpText("Hover for more details about each specific killing."),
# Input to select variable to map
selectInput(
"map_var",
label = "Variable to color each point",
choices = list(
"Race/Ethnicity" = "raceethnicity",
"Gender" = "gender",
"Cause of Death" = "cause"
)
)
),
mainPanel(
leafletOutput("Map"),
tags$p("This map shows each killing at the hands of police in 2015. The selected
variable will affect the color of each point representing each killing with the
legend provided to the left. The hover information details the name of the victim
along with the city and state where the killing occurred.")
)
)
),
#tab panel for scatterplot
tabPanel("Scatterplot",
sidebarLayout(
sidebarPanel(
tags$h3("Explore the data: Create a Scatterplot"),
helpText("Choose which census data to display on each axis.
The census data pertains to the county where each killing occured."),
selectInput(
"scatter_x_var",
label = "County data on the x-axis",
choices = list(
"Population" = "pop",
"Average Income" = "county_income",
"Percentage of White" = "share_white",
"Percentage of Black" = "share_black",
"Percentage of Hispanic" = "share_hispanic",
"Percentage of College Educated" = "college"
)
),
selectInput(
"scatter_y_var",
label = "County data on the y-axis",
choices = list(
"Average Income" = "county_income",
"Population" = "pop",
"Percentage of White" = "share_white",
"Percentage of Black" = "share_black",
"Percentage of Hispanic" = "share_hispanic",
"Percentage of College Educated" = "college"
)
),
selectInput(
"scatter_color_var",
label = "Variable to color each point",
choices = list(
"Armed" = "armed",
"Race/Ethnicity" = "raceethnicity",
"Gender" = "gender"))
),
mainPanel(
plotOutput("scatter_1"),
tags$p("Above is a scatterplot with the chosen demographic values of the counties of each killing on the x axis and the y axis.
View the distribution of the values with the histograms depicted above/underneath.")
)
)
),
#tab panel for choropleth map
tabPanel("Choropleth Map",
h3("Choropleth Map: Number of Victims per Race/Ethnicity"),
sidebarLayout(
sidebarPanel(
helpText("Create choropleth map that shows the distribution of victim counts
by the race/ethnicity selected."),
selectInput("race",
label = "Choose a race/ethnicity to display",
choices = c("White", "Black", "Hispanic/Latino", "Asian/Pacific Islander"),
selected = 1
)
),
mainPanel(plotOutput("Map2"),
tags$p("Above is a choropleth map detailing the distribution of victims
of the selected race/ethnicity across the country. The darker the shade of
blue, the greater the number of victims. In circumstances where there were
no victims of that race/ethnicity killed in that state or that information
was not available, NA is represented in black.")
)
)
)
)
)
library(dplyr)
library(leaflet)
source("Map Plot.R")
source("max's_scatterplot.R")
source("James' map.R")
df <- read.csv("police_killings.csv", stringsAsFactors = F)
df$raceethnicity <- factor(df$raceethnicity, levels = c("Black", "White", "Hispanic/Latino",
"Asian/Pacific Islander"))
df$gender <- factor(df$gender,
levels = c("Male", "Female"))
df$cause <- factor(df$cause,
levels = c("Gunshot", "Taser", "Death in custody", "Struck by vehicle"))
shinyServer(function(input, output) {
# Render a plotly object that returns your map
output$Map <- renderLeaflet({
return(build_map(df, input$map_var))
})
output$scatter_1 <- renderPlot({
return(max_plot_1(df, input$scatter_x_var, input$scatter_y_var, input$scatter_color_var))
})
output$Map2 <- renderPlot ({
return(make_choropleth(df, input$race))
})
})
library(choroplethrMaps)
library(choroplethr)
library(dplyr)
library(stringr)
library(ggplot2)
make_choropleth <- function(df, race_selected) {
df$region <- state.name[match(df[["state"]], state.abb)]
df <- df %>% filter(raceethnicity == race_selected)
df_mod <- count(df, df$region)
df_mod <- data.frame("region" = tolower(df_mod$`df$region`), "value" = df_mod$n)
df_mod <- df_mod[!is.na(df_mod$region), ]
choro_map <- state_choropleth(df_mod,
title = paste0("Police Killings In US (", race_selected, ")"),
legend = "Number of Victims", num_colors = 9)
return(choro_map)
}
library(ggplot2)
library(dplyr)
library(ggExtra)
police_killings <- read.csv("police_killings.csv")
max_plot_1 <- function(df, input_x, input_y, input_color) {
df <- na.omit(df)
p <- ggplot(df, aes(as.numeric(df[ ,input_x]), as.numeric(df[ ,input_y]), color = df[, input_color])) +
geom_point(na.rm = T) +
xlim(0, max(as.numeric(df[[input_x]]), na.rm = T)) +
ylim(0, max(as.numeric(df[[input_y]]), na.rm = T)) +
xlab(input_x) +
ylab(input_y) +
labs(color=paste(input_color))
p <- ggMarginal(p, type = "histogram")
return(p)
}
runApp()
library(choroplethr)
install.packages("choroplethr", dependencies = TRUE)
library(choroplethr)
library(choroplethrMaps)
library(dplyr)
library(ggplot2)
library(stringr)
library(ggExtra)
install.packages("tigris")
library(choroplethr)
library(choroplethr)
library(tigris)
remove.packages("choroplethr")
install.packages("choroplethr", dependencies = TRUE)
library(choroplethr)
install.packages("tigris")
library(tigris)
library(choroplethr)
runApp()
install.packages("hexbin")
library(hexbin)
runApp()
runApp()
runApp()
runApp()
